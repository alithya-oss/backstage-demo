# https://taskfile.dev

version: '3'

dotenv: ['.env']

vars:
  GREETING: Hello, World!

tasks:
  default:
    cmds:
      - echo "{{.GREETING}}"
    silent: true

  ci:verify:
    desc: Pipeline d'intégration complet
    summary: |
      Exécution des étapes d'intégration incluant la généreation des rapports API et l'exécution des tests d'intégration.
    env:
      NODE_OPTIONS: --max-old-space-size=8192
    cmds:
      - cmd: yarn install --immutable
      - task: verify:dedupe
      - task: verify:local-deps
      - task: verify:peer-deps
      - task: verify:repo-fix
      - task: verify:config
      - cmd: yarn tsc
      - task: verify:codeformat
      - task: verify:type-deps
      - cmd: yarn build:api-reports:only
      - cmd: yarn backstage-cli repo lint --since origin/main
      - cmd: yarn backstage-cli repo test --coverage --maxWorkers=3

  verify:config:
    desc: Validate config
    cmds:
      - cmd: yarn backstage-cli config:check --lax

  verify:dedupe:
    desc: Verify and fix lockfile duplicates
    summary: Verify deduplicated dependencies with overlapping ranges
    cmds:
      - cmd: node scripts/verify-lockfile-duplicates.js yarn.lock

  verify:doc-links:
    desc: Verify links in documentation
    cmds:
      - cmd: node scripts/verify-links.js

  verify:peer-deps:
    desc: Verify peer dependency ranges
    cmds:
      - cmd: yarn backstage-repo-tools peer-deps

  verify:type-deps:
    desc: Verify type dependencies
    cmds:
      - cmd: yarn backstage-repo-tools type-deps

  verify:local-deps:
    desc: Verify local dependency ranges
    cmds:
      - cmd: node scripts/verify-local-dependencies.js

  verify:codeformat:
    desc: Verify code formatting
    cmds:
      - cmd: yarn prettier --check .

  verify:repo-fix:
    desc: Check for missing repo fixes
    cmds:
      - cmd: yarn backstage-cli repo fix --check

  bump:framework:
    desc: Update Backstage related packages
    summary: |
      Updates dependencies related to the latest Backstage version.
      Impacts both `app` and `backend` packages, along with internally developped plugins.
      (see: https://backstage.io/docs/getting-started/keeping-backstage-updated)
    cmds:
      - cmd: yarn install
      - cmd: yarn backstage-cli versions:bump
      # - task: ci:verify
      - cmd: git add .
      - cmd: git commit -a -m "Bump Backstage framework $(yq -r .version backstage.json)"

  bump:plugins:
    desc: Update Community plugins
    summary: |
      Updates dependencies related to plugins maintained by the open source community.
      Impacts both `app` and `backend` packages, and occasionnaly internally developped plugins.
      (see: https://backstage.io/docs/getting-started/keeping-backstage-updated)
    vars:
      SCOPES:
        - alithya-oss
        - backstage-community
        - opentelemetry
        - roadiehq
    dir: ./
    cmds:
      - cmd: yarn install --immutable
      - cmd: yarn backstage-cli versions:bump --pattern '{{ .SCOPES | join "," | printf "@{%s}/*" }}'
      # - task: ci:check
      - cmd: git add .
      - cmd: git commit -a -m "Bump community plugins and dependencies"

  build:oci:
    cmds:
      - cmd: |
          docker image build \
          --tag oci.local/alithya/backstage:dev \
          --file containers/backend/Dockerfile \
          ./
  run:
    desc: Run Backstage application in development mode
    cmds:
      - cmd: yarn install --immutable
      - cmd: LOG_LEVEL=debug yarn start

  run:k3s:
    desc: Run Backstage inside Kubernetes
    cmds:
      - cmd: sudo systemctl stop k3s.service
      - cmd: sudo systemctl start k3s.service
      - task: install:crds
      - task: install:argo-cd
      - task: install:prometheus
      - task: install:backstage

  run:load-test:
    desc: Run load test
    cmds:
      - cmd: yarn install --immutable
      - cmd: >
          yarn artillery run
          --env-file .env
          load-test.yml

  generate:slo:
    desc: Generate Prometheus rules for Backstage app
    cmds:
      - cmd: mkdir -p packages/backend/monitoring
      - cmd: >
          curl -fsSL
          -o 'packages/backend/monitoring/prometheus.yml'
          https://raw.githubusercontent.com/backstage/backstage/refs/heads/master/packages/backend/prometheus.yml
      - cmd: >
          yq eval --inplace '
          .scrape_configs[0].job_name = "backstage" |
          .scrape_configs[1].job_name = "prometheus" |
          .scrape_configs[1].static_configs[0].targets[0] = "localhost:9090"
          ' packages/backend/monitoring/prometheus.yml
      # - oslo validate -f deploy/monitoring/slo-spec.v1alpha.yml
      - cmd: >
          sloth generate
          -i deploy/monitoring/sloth-spec.v1.yml
          -o packages/backend/monitoring/backstage-rules.yml
      - promtool check rules packages/backend/monitoring/backstage-rules.yml
      - cmd: >
          yq -i '.rule_files[0] = "backstage-rules.yml"
          ' packages/backend/monitoring/prometheus.yml

  install:k3s:
    desc: Install K3S
    summary: >
      Traefik as it conflicts with the LoadBalancer service controller
    cmds:
      - cmd: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='server --disable=traefik' sh -s - 

  install:minikube:
    desc: Install Minikube
    cmds:
      - cmd: mkdir -p .bin/
      - cmd: |
          curl -Lo .bin/minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
      - cmd: chmod +x .bin/minikube
      - cmd: .bin/minikube config set driver docker
      - cmd: .bin/minikube start


  install:crds:
    desc: Install required
    vars:
      PROMETHEUS_CRDS_VERSION: 2.0.0
    cmds:
      - cmd: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - cmd: helm repo update
      - cmd: |
          helm upgrade --install \
          --version "{{.PROMETHEUS_CRDS_VERSION}}" \
          prometheus-operator-crds \
          prometheus-community/prometheus-operator-crds

  install:argo-cd:
    desc: Install ArgoCD
    vars:
      ARGO_CD_VERSION: latest
      ADMIN_PWD: admin
    env:
      ADMIN_PWD: '{{.ADMIN_PWD}}'
    cmds:
      - cmd: mkdir -p .bin/
      - cmd: |
          curl -fsSL -o .bin/argocd \
          https://github.com/argoproj/argo-cd/releases/{{.ARGO_CD_VERSION}}/download/argocd-linux-amd64
      - cmd: chmod +x .bin/argocd
      - cmd: helm repo add argo https://argoproj.github.io/argo-helm
      - cmd: helm repo update
      - cmd: |
          helm upgrade --install \
          --wait \
          --namespace argo-cd \
          --create-namespace \
          --set configs.secret.argocdServerAdminPassword="$(.bin/argocd account bcrypt --password {{.ADMIN_PWD}})" \
          --set server.extraArgs[0]="--insecure" \
          --set server.service.type="LoadBalancer" \
          --set server.service.servicePortHttp="10080" \
          --set configs.params.server.insecure="true" \
          --set controller.metrics.enabled="true" \
          --set controller.metrics.serviceMonitor.enabled="true" \
          --set dex.enabled="true" \
          --set dex.metrics.enabled="true" \
          --set dex.metrics.serviceMonitor.enabled="true" \
          --set redis.metrics.enabled="true" \
          --set redis.metrics.serviceMonitor.enabled="true" \
          --set server.metrics.enabled="true" \
          --set server.metrics.serviceMonitor.enabled="true" \
          --set repoServer.metrics.enabled="true" \
          --set repoServer.metrics.serviceMonitor.enabled="true" \
          --set applicationSet.enabled="true" \
          --set applicationSet.metrics.enabled="true" \
          --set applicationSet.metrics.serviceMonitor.enabled="true" \
          --set notifications.enabled="true" \
          --set notifications.metrics.enabled="true" \
          --set notifications.metrics.serviceMonitor.enabled="true" \
          gitops argo/argo-cd
      - cmd: |
          .bin/argocd login  localhost:10080 --insecure --plaintext \
          --username "admin" \
          --password {{.ADMIN_PWD}}
      - cmd: |
          kubectl -n argo-cd patch configmap/argocd-cm \
          --type='json' \
          --patch '[{"op": "add", "path": "/data/accounts.sysops", "value": "apiKey,login"}]'
      - cmd: |
          kubectl -n argo-cd patch configmap/argocd-cm \
          --type='json' \
          --patch '[{"op": "add", "path": "/data/accounts.backstage", "value": "apiKey,login"}]'
      - cmd: |
          kubectl -n argo-cd patch configmap/argocd-rbac-cm \
          --type='json' \
          --patch '[{"op": "add", "path": "/data/policy.csv", "value": "g, sysops, role:admin\ng, backstage, role:readonly\n"}]'

  install:prometheus:
    desc: Install Prometheus
    cmds:
      - task: install:crds
      - cmd: .bin/argocd app create kube-prometheus -f deploy/argocd/kube-prometheus.yaml --upsert

  install:app:
    desc: Install FastAPI demo app
    cmds:
      - cmd: .bin/argocd app create demo -f deploy/argocd/fastapi-demo.yaml --upsert

  install:backstage:
    desc: Install Backstage app
    cmds:
      - cmd: .bin/argocd app create backstage -f deploy/argocd/backstage.yaml --upsert
      - cmd: |
          sloth generate \
          -i deploy/monitoring/service-level-slo-spec.v1.yml \
          -o deploy/manifests/backstage-rule.yml
      - cmd: kubectl apply -f deploy/manifests/backstage-rule.yml
      - cmd: kubectl apply -f deploy/manifests/backstage-rbac.yaml

  install:secrets:
    desc: Install secrets
    vars:
      BACKSTAGE_PREFIX: backstage
    dotenv: [ .env ]
    cmds:
      - cmd: |
          rm -f deploy/manifests/{{.BACKSTAGE_PREFIX}}-secret-encrypted.yaml \
          && kubectl create secret generic \
          --namespace {{.BACKSTAGE_PREFIX}} \
          {{.BACKSTAGE_PREFIX}}-env \
          --from-literal="AUTH_GITHUB_CLIENT_ID=${AUTH_GITHUB_CLIENT_ID}" \
          --from-literal="AUTH_GITHUB_CLIENT_SECRET=${AUTH_GITHUB_CLIENT_SECRET}" \
          --from-literal="INTEGRATION_GITHUB_APP_ID=${INTEGRATION_GITHUB_APP_ID}" \
          --from-literal="INTEGRATION_GITHUB_PRIVATE_KEY=${INTEGRATION_GITHUB_PRIVATE_KEY}" \
          --from-literal="INTEGRATION_GITHUB_WEBHOOK_SECRET=${INTEGRATION_GITHUB_WEBHOOK_SECRET}" \
          --dry-run=client -o yaml > deploy/manifests/{{.BACKSTAGE_PREFIX}}-secret.yaml \
          && sops --encrypt deploy/manifests/{{.BACKSTAGE_PREFIX}}-secret.yaml > deploy/manifests/{{.BACKSTAGE_PREFIX}}-secret-encrypted.yaml \
          && kubectl apply -f deploy/manifests/{{.BACKSTAGE_PREFIX}}-secret.yaml

  release:github:
    desc: Manually trigger Github release
    summary:
    vars:
      VERSION:
        sh: yq -r '.version' package.json
    cmds:
      - cmd: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $(gh auth token)" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/alithya-oss/backstage-demo/dispatches \
          -d '{"event_type":"release-published","client_payload":{"version":"{{.VERSION}}"}}'