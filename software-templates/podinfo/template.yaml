
apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: podinfo-template
  title: Podinfo Template
  description: An example template for the scaffolder
spec:
  owner: user:guest
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        dryRun:
          title: Dry run
          description: Render only. Dot not write to SCM.
          type: boolean
          default: true
        name:
          title: Name
          type: string
          description: Unique name of the component
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{parameters.name}}
          owner: ${{parameters.owner}}
          repoUrl: ${{parameters.repoUrl}}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}

    - if: ${{ parameters.dryRun === true }}
      id: debug-templating
      name: Dry-Run
      action: debug:log
      input:
        listWorkspace: with-contents

    - if: ${{ parameters.dryRun === false }}
      id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        repoVisibility: 'public'
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: 'main'

    # The final step is to register our new component in the catalog.
    - if: ${{ parameters.dryRun === false }}
      id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - if: ${{ parameters.dryRun === false }}
      id: sendNotification
      action: notification:send
      name: Notification portail
      input:
        recipients: entity
        entityRefs:
          - user:default/${{ user.entity.metadata.name }}
          - ${{ parameters.owner }}
        title: "New PodInfo project created"
        info: "A new project rendered from the podinfo template has been submitted"
        link: ${{ steps['publish'].output.remoteUrl }}
        severity: low
        scope: internal

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
