apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: backstage
  namespace: argo-cd
spec:
  destination:
    server: "https://kubernetes.default.svc"
    namespace: backstage
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
    automated: {}
  source:
    chart: backstage
    repoURL: https://backstage.github.io/charts
    targetRevision: 2.5.2
    helm:
      releaseName: default
      valuesObject:
        serviceAccount:
          create: true
          name: backstage
        postgresql:
          enabled: true
          auth:
            username: backstage
            password: hunter2
          primary:
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
        service:
          type: LoadBalancer
          ports:
            backend: 7007
          annotations:
            metallb.universe.tf/allow-shared-ip: edge-endpoint
          extraPorts:
            - name: http-prom
              port: 9464
              targetPort: prometheus
              protocol: TCP
        metrics:
          serviceMonitor:
            enabled: true
            port: http-prom
        backstage:
          image:
            registry: ghcr.io
            repository: alithya-oss/backstage/demo
            tag: 0.8.7
          command: ["node", "--require", "/app/prometheus.js", "packages/backend"]
          extraEnvVarsSecrets:
            - backstage-env
          extraPorts:
            - name: prometheus
              containerPort: 9464
              protocol: TCP
          appConfig:
            app:
              title: Backstage tutorial
              baseUrl: http://localhost:7007

            organization:
              name: Backstage

            backend:
              infraWallet:
                integrations:
                  mock:
                    - name: demo-mock-data
              baseUrl: http://localhost:7007
              listen:
                host: 0.0.0.0
                port: 7007

              csp:
                connect-src: ["'self'", 'http:', 'https:']
                img-src:
                  - "'self'"
                  - 'data:'
                  - 'https://backstage.io'
                  - 'https://img.shields.io/'
                  - 'https://api.dicebear.com/'
                  - 'https://kroki.io/'
                  - 'https://www.bestpractices.dev/'
                  - 'https://api.securityscorecards.dev'
                  - 'https://github.com'
                  - 'https://raw.githubusercontent.com'
                frame-src: ['https://www.youtube.com']
              
              cors:
                origin: http://localhost:7007

              database:
                client: pg
                connection:
                  host: ${POSTGRES_HOST}
                  port: ${POSTGRES_PORT}
                  user: ${POSTGRES_USER}
                  password: ${POSTGRES_PASSWORD}

              auth:
                externalAccess:
                  - type: static
                    options:
                      token: you-should-better-use-an-environment-variable-here
                      subject: load-test

            integrations:
              github:
                - host: github.com
                  apps:
                    - appId: ${INTEGRATION_GITHUB_APP_ID}
                      clientId: ${AUTH_GITHUB_CLIENT_ID}
                      clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
                      privateKey: ${INTEGRATION_GITHUB_PRIVATE_KEY}
                      webhookSecret: ${INTEGRATION_GITHUB_WEBHOOK_SECRET}

            proxy:
              endpoints:
                /prometheus0/api:
                  target: http://prometheus-operated.monitoring:9090/api/v1/
                  changeOrigin: true
                  credentials: dangerously-allow-unauthenticated

            techdocs:
              builder: 'local'
              generator:
                runIn: 'local'
              publisher:
                type: 'local'

            auth:
              environment: production
              providers:
                guest:
                  dangerouslyAllowOutsideDevelopment: true
                github:
                  production:
                    clientId: ${AUTH_GITHUB_CLIENT_ID}
                    clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
                    signIn:
                      resolvers:
                        - resolver: usernameMatchingUserEntityName
                        - resolver: emailMatchingUserEntityProfileEmail
                        - resolver: emailLocalPartMatchingUserEntityName

            scaffolder:


            catalog:
              import:
                entityFilename: catalog-info.yaml
                pullRequestBranchName: backstage-integration

              rules:
                - allow: [Component, System, API, Resource, Location]

              locations:
                - type: url
                  target: https://github.com/alithya-oss/backstage-demo/blob/main/examples/entities.yaml
                - type: url
                  target: https://github.com/alithya-oss/backstage-demo/blob/main/examples/template/template.yaml
                  rules:
                    - allow: [Template]
                - type: url
                  target: https://github.com/alithya-oss/backstage-demo/blob/main/examples/org.yaml
                  rules:
                    - allow: [User, Group]
                - type: url
                  target: https://github.com/testruction/fastapi-sqlalchemy-cockroachdb/blob/main/catalog-info.yaml
                - type: url
                  target: https://github.com/alithya-oss/backstage-demo/blob/main/software-catalog/catalog-info.yaml
                  rules:
                    - allow: [API, Component, Domain, Group, Location, Resource, System, Template, User]

              providers:
                backstageOpenapi:
                  plugins:
                    - catalog
                    - events
                    - search
                  entityOverrides:
                    spec:
                      owner: group:default/devex
                      system: developer-portal

            kubernetes:
              serviceLocatorMethod:
                type: multiTenant

              clusterLocatorMethods:
                - type: config
                  clusters:
                    - url: kubernetes.default.svc.cluster.local
                      name: local
                      authProvider: serviceAccount
                      skipTLSVerify: false
                      skipMetricsLookup: false

            prometheus:
              proxyPath: /prometheus0/api

            argocd:
              revisionsToLoad: 15
              localDevelopment: true
              username: admin
              password: admin
              appLocatorMethods:
                - type: 'config'
                  instances:
                    - name: instance0
                      url: http://gitops-argocd-server.argo-cd:10080
                      username: admin
                      password: admin

            infraWallet:
              settings:
                defaultGroupBy: none
                defaultShowLastXMonths: 3

            techInsights:
              factRetrievers:
                entityOwnershipFactRetriever:
                  cadence: '*/15 * * * *'
                  lifecycle:
                    timeToLive:
                      weeks: 2
                entityMetadataFactRetriever:
                  cadence: '*/15 * * * *'
                  lifecycle:
                    timeToLive:
                      weeks: 2
                techdocsFactRetriever:
                  cadence: '*/15 * * * *'
                  lifecycle:
                    timeToLive:
                      weeks: 2
                apiDefinitionFactRetriever:
                  cadence: '*/15 * * * *'
                  lifecycle:
                    timeToLive:
                      weeks: 2
                resourceTypeFactRetriever:
                  cadence: '*/15 * * * *'
                  lifecycle:
                    timeToLive:
                      weeks: 2
              factChecker:
                checks:
                  groupOwnerCheck:
                    type: json-rules-engine
                    name: Group Owner Check
                    description: Verifies that a group has been set as the spec.owner for this entity
                    factIds:
                      - entityOwnershipFactRetriever
                    rule:
                      conditions:
                        all:
                          - fact: hasGroupOwner
                            operator: equal
                            value: true
                    metadata:
                      category: Ownership
                      rank: 1
                      solution: Add a group owner to the `spec.owner` field in the entity YAML definition

                  titleCheck:
                    type: json-rules-engine
                    name: Title Check
                    description: Verifies that a Title, used to improve readability, has been set for this entity
                    factIds:
                      - entityMetadataFactRetriever
                    rule:
                      conditions:
                        all:
                          - fact: hasTitle
                            operator: equal
                            value: true
                    metadata:
                      category: Ownership
                      rank: 1
                      solution: Add a friendly name to the `spec.title` field in the entity YAML definition

                  techdocsCheck:
                    type: json-rules-engine
                    name: TechDocs Check
                    description: Verifies that TechDocs has been enabled for this entity
                    factIds:
                      - techdocsFactRetriever
                    rule:
                      conditions:
                        all:
                          - fact: hasAnnotationBackstageIoTechdocsRef
                            operator: equal
                            value: true
                    metadata:
                      category: Maintainability
                      rank: 2
                      solution: >
                        Add a the path to [Markdown/Mkdocs material](https://squidfunk.github.io/mkdocs-material/reference/) formatted documentation
                        to the `backstage.io/techdocs-ref` field in the entity YAML definition

                  apiDefinitionCheck:
                    type: json-rules-engine
                    name: API definition Check
                    description: Verifies that a API has a definition set
                    factIds:
                      - apiDefinitionFactRetriever
                    rule:
                      conditions:
                        all:
                          - fact: hasDefinition
                            operator: equal
                            value: true
                    metadata:
                      category: Integration
                      rank: 2
                      solution: >
                        Add an [api definition](https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api)
                        or a [substitutions](https://backstage.io/docs/features/software-catalog/descriptor-format/#substitutions-in-the-descriptor-format) >
                        to the `spec.definition` field in the entity YAML definition

            explore:
              tools:
                - title: Infrawallet
                  description: Cloud cost monitoring by Electrolux OSS
                  url: /infrawallet
                  image: https://github.com/electrolux-oss/infrawallet/raw/main/plugins/infrawallet/docs/images/iw_demo.gif
                  tags: [ finops, cost, monitoring ]
                - title: Maturity
                  description: Best practices auditing based on tech-insight
                  url: /maturity
                  image: https://github.com/backstage/community-plugins/raw/main/workspaces/tech-insights/plugins/tech-insights-maturity/img/maturityScorecardContent.png
                  tags: [ audit, maturity, compliance ]